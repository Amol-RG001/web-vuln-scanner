from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.units import inch
from urllib.parse import urlparse
from datetime import datetime
import os


def generate_pdf_report(url, results):
    domain = urlparse(url).netloc.replace('.', '_')
    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    #generate report inside reports directory
    output_dir = "reports"
    os.makedirs(output_dir, exist_ok=True)
    filename = os.path.join(output_dir, f'report_{domain}_{timestamp}.pdf')


    doc = SimpleDocTemplate(filename, pagesize=A4,
                            rightMargin=72, leftMargin=72,
                            topMargin=72, bottomMargin=72)

    styles = getSampleStyleSheet()

    # Modify existing Heading1
    styles['Heading1'].fontSize = 16
    styles['Heading1'].leading = 20
    styles['Heading1'].spaceAfter = 12
    styles['Heading1'].alignment = 1  # Center

    # Add custom styles safely
    if 'Heading2' not in styles:
        styles.add(ParagraphStyle(name='Heading2', fontSize=12, leading=14, spaceAfter=6, textColor='blue'))
    if 'BodyTextSmall' not in styles:
        styles.add(ParagraphStyle(name='BodyTextSmall', fontSize=10, leading=12, spaceAfter=8))

    story = []

    # Report Header
    story.append(Paragraph("Website Vulnerability Scan Report", styles['Heading1']))
    story.append(Paragraph(f"Scanned URL: <b>{url}</b>", styles['BodyTextSmall']))
    story.append(Paragraph(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['BodyTextSmall']))
    story.append(Spacer(1, 0.2 * inch))

    # Severity color map
    color_map = {"High": "red", "Medium": "orange", "Low": "green", "Unknown": "black"}

    # Scan Results
    for key, value in results.items():
        # owasp_title = key.upper().replace("_", " ").replace("A", "A0")
        owasp_title = f"{key[:3].upper()}: {key[4:].replace('_', ' ').title()}"

        story.append(Paragraph(f"{owasp_title}", styles['Heading2']))

        # Structured data
        status = value.get("status", "Unknown")
        severity = value.get("severity", "Unknown")
        details = value.get("details", "No additional information.")

        severity_color = color_map.get(severity, "black")
        result_text = (
            f"<b>Status:</b> {status}<br/>"
            f"<b>Severity:</b> <font color='{severity_color}'>{severity}</font><br/><br/>"
            f"{details.replace(chr(10), '<br/>')}"
        )

        story.append(Paragraph(result_text, styles['BodyTextSmall']))
        story.append(Spacer(1, 0.1 * inch))

    doc.build(story)
    print(f"[âœ“] Report saved as: {filename}")

